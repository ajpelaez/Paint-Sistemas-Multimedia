/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sm;


import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.ItemEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.io.File;
import javax.imageio.ImageIO;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import sm.ajpp.iu.Figure;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.ajpp.iu.Lienzo2DImagen;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.sound.SMClipPlayer;
import sm.sound.SMRecorder;
import sm.sound.SMSoundRecorder;

/**
 * Ventana principal que contiene la mayor parte de interacción con el usario
 * @author ajpelaez
 */
public class MainWindow extends javax.swing.JFrame {
    private BufferedImage imgSource;
    private Dimension imgDimension = new Dimension(300, 300);
    
    private SMClipPlayer player = null;
    private SMRecorder recorder = null;
    
    private boolean isAudioPlaying = false;
    private boolean audioPausedByButton = false;
    
    Icon playAudioIcon = new ImageIcon(
                MainWindow.class.getResource("iconos/play24x24.png"));
    Icon pauseAudioIcon = new ImageIcon(
                MainWindow.class.getResource("iconos/pausa24x24.png"));
    
    Color[] colors = {Color.black, Color.red , Color.blue, Color.white, 
        Color.yellow, Color.green};
    
    Object[] imagenesColores = {
        createColorImage(colors[0]),
        createColorImage(colors[1]),
        createColorImage(colors[2]),
        createColorImage(colors[3]),
        createColorImage(colors[4]),
        createColorImage(colors[5]),
    };
    
    InternalWindow activeWindow;
    
    InternalFrameListener internalListener = new InternalFrameListener() {
        @Override
        public void internalFrameActivated(InternalFrameEvent e) {
            setActiveWindow();
        }
        @Override
        public void internalFrameClosed(InternalFrameEvent e) {}
        @Override
        public void internalFrameClosing(InternalFrameEvent e) {
            if(activeWindow.containsCamera())
                ((InternalWindowCamera)activeWindow).getCamera().close();
            if(activeWindow.containsVideo())
                ((InternalWindowVLCPlayer)activeWindow).stop();
        }
        @Override
        public void internalFrameDeactivated(InternalFrameEvent e) {
            setActiveWindow();
        }
        @Override
        public void internalFrameDeiconified(InternalFrameEvent e) {}
        @Override
        public void internalFrameIconified(InternalFrameEvent e) {}
        @Override
        public void internalFrameOpened(InternalFrameEvent e) {
            setActiveWindow();
        }
    };
    
    public MainWindow() { 
        initComponents();
        enableImageButtons(false);
    }
    
    class AudioController implements LineListener {
        
        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
                isAudioPlaying = true;
            }
            if (event.getType() == LineEvent.Type.STOP) {
                playAudioButton.setIcon(playAudioIcon);
                playAudioButton.setSelected(false);
                if (!audioPausedByButton) isAudioPlaying = false;
                audioPausedByButton = false;
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoBotonesFormas = new javax.swing.ButtonGroup();
        topToolBar = new javax.swing.JToolBar();
        newFileButton = new javax.swing.JButton();
        openFileButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        lineButton = new javax.swing.JToggleButton();
        curveButton = new javax.swing.JToggleButton();
        polyLineButton = new javax.swing.JToggleButton();
        rectangleButton = new javax.swing.JToggleButton();
        ellipseButton = new javax.swing.JToggleButton();
        ringButton = new javax.swing.JToggleButton();
        editButton = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        colorsComboBox = new javax.swing.JComboBox( imagenesColores );
        jSeparator3 = new javax.swing.JToolBar.Separator();
        strokeSizeSpinner = new javax.swing.JSpinner();
        strokeTypeComboBox = new javax.swing.JComboBox<>();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        fillingButton = new javax.swing.JToggleButton();
        gradientCheckBox = new javax.swing.JCheckBox();
        colorsGradientComboBox = new javax.swing.JComboBox( imagenesColores );
        jSeparator7 = new javax.swing.JToolBar.Separator();
        transparencyButton = new javax.swing.JToggleButton();
        transparencySlider = new javax.swing.JSlider();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        antialiasingButton = new javax.swing.JToggleButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        playAudioButton = new javax.swing.JToggleButton();
        stopAudioButton = new javax.swing.JButton();
        playList = new javax.swing.JComboBox<>();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        recordAudioButton = new javax.swing.JToggleButton();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        webcamButton = new javax.swing.JButton();
        snapshotButton = new javax.swing.JButton();
        contenedorInferior = new javax.swing.JPanel();
        barraEstadoPanel = new javax.swing.JPanel();
        formaEnUso = new javax.swing.JLabel();
        labelCoordenadas = new javax.swing.JLabel();
        barraAtributos = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        sliderBrillo = new javax.swing.JSlider();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        comboBoxFiltros = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        sliderIntensificacion = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        botonContraste = new javax.swing.JButton();
        botonIluminar = new javax.swing.JButton();
        botonOscurecer = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        botonSeno = new javax.swing.JButton();
        botonSepia = new javax.swing.JButton();
        botonNegativo = new javax.swing.JButton();
        botonViñeta = new javax.swing.JButton();
        botonRandom = new javax.swing.JButton();
        jPanel20 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        botonBandas = new javax.swing.JButton();
        comboBoxEspacioColor = new javax.swing.JComboBox<>();
        jPanel11 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        botonAumentarEscala = new javax.swing.JButton();
        botonDisminuirEscala = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        sliderRotacion = new javax.swing.JSlider();
        botonRotacion90 = new javax.swing.JButton();
        botonRotacion180 = new javax.swing.JButton();
        botonRotacion270 = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        moveBack = new javax.swing.JButton();
        moveToLastPosition = new javax.swing.JButton();
        moveFront = new javax.swing.JButton();
        moveToFirstPosition = new javax.swing.JButton();
        desktop = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuNuevo = new javax.swing.JMenuItem();
        menuAbrir = new javax.swing.JMenuItem();
        menuGuardar = new javax.swing.JMenuItem();
        menuEdicion = new javax.swing.JMenu();
        menuBarraEstado = new javax.swing.JCheckBoxMenuItem();
        menuBarraFormas = new javax.swing.JCheckBoxMenuItem();
        menuBarraAtributos = new javax.swing.JCheckBoxMenuItem();
        menuImagen = new javax.swing.JMenu();
        opcionDuplicarImagen = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Paint");
        setMinimumSize(new java.awt.Dimension(1400, 800));

        topToolBar.setRollover(true);

        newFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/nuevo.png"))); // NOI18N
        newFileButton.setToolTipText("Nuevo");
        newFileButton.setFocusable(false);
        newFileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newFileButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileButtonActionPerformed(evt);
            }
        });
        topToolBar.add(newFileButton);

        openFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/abrir.png"))); // NOI18N
        openFileButton.setToolTipText("Abrir");
        openFileButton.setFocusable(false);
        openFileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openFileButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });
        topToolBar.add(openFileButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/guardar.png"))); // NOI18N
        saveButton.setToolTipText("Guardar");
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        topToolBar.add(saveButton);
        topToolBar.add(jSeparator1);

        grupoBotonesFormas.add(lineButton);
        lineButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/linea.png"))); // NOI18N
        lineButton.setToolTipText("Línea");
        lineButton.setFocusable(false);
        lineButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lineButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineButtonActionPerformed(evt);
            }
        });
        topToolBar.add(lineButton);

        grupoBotonesFormas.add(curveButton);
        curveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/Curva.gif"))); // NOI18N
        curveButton.setToolTipText("Curva");
        curveButton.setFocusable(false);
        curveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        curveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        curveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                curveButtonActionPerformed(evt);
            }
        });
        topToolBar.add(curveButton);

        grupoBotonesFormas.add(polyLineButton);
        polyLineButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/trazo.gif"))); // NOI18N
        polyLineButton.setToolTipText("Trazo libre");
        polyLineButton.setFocusable(false);
        polyLineButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        polyLineButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        polyLineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                polyLineButtonActionPerformed(evt);
            }
        });
        topToolBar.add(polyLineButton);

        grupoBotonesFormas.add(rectangleButton);
        rectangleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/rectangulo.png"))); // NOI18N
        rectangleButton.setToolTipText("Rectángulo");
        rectangleButton.setFocusable(false);
        rectangleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectangleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleButtonActionPerformed(evt);
            }
        });
        topToolBar.add(rectangleButton);

        grupoBotonesFormas.add(ellipseButton);
        ellipseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/elipse.png"))); // NOI18N
        ellipseButton.setToolTipText("Eclipse");
        ellipseButton.setFocusable(false);
        ellipseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ellipseButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ellipseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ellipseButtonActionPerformed(evt);
            }
        });
        topToolBar.add(ellipseButton);

        grupoBotonesFormas.add(ringButton);
        ringButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/anillo.gif"))); // NOI18N
        ringButton.setToolTipText("Anillo");
        ringButton.setFocusable(false);
        ringButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ringButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ringButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ringButtonActionPerformed(evt);
            }
        });
        topToolBar.add(ringButton);

        grupoBotonesFormas.add(editButton);
        editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/seleccion.png"))); // NOI18N
        editButton.setFocusable(false);
        editButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                editButtonItemStateChanged(evt);
            }
        });
        topToolBar.add(editButton);
        topToolBar.add(jSeparator2);

        colorsComboBox.setToolTipText("Color");
        colorsComboBox.setMaximumSize(new java.awt.Dimension(34, 25));
        colorsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorsComboBoxActionPerformed(evt);
            }
        });
        topToolBar.add(colorsComboBox);
        topToolBar.add(jSeparator3);

        strokeSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        strokeSizeSpinner.setToolTipText("Grosor trazo");
        strokeSizeSpinner.setMaximumSize(new java.awt.Dimension(42, 26));
        strokeSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                strokeSizeSpinnerStateChanged(evt);
            }
        });
        topToolBar.add(strokeSizeSpinner);

        strokeTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Continuo", "Punteado" }));
        strokeTypeComboBox.setToolTipText("Tipo trazo");
        strokeTypeComboBox.setMaximumSize(new java.awt.Dimension(73, 25));
        strokeTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strokeTypeComboBoxActionPerformed(evt);
            }
        });
        topToolBar.add(strokeTypeComboBox);
        topToolBar.add(jSeparator4);

        fillingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/rellenar.png"))); // NOI18N
        fillingButton.setToolTipText("Rellenar");
        fillingButton.setFocusable(false);
        fillingButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fillingButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        fillingButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fillingButtonItemStateChanged(evt);
            }
        });
        topToolBar.add(fillingButton);

        gradientCheckBox.setToolTipText("Activar relleno con degradado");
        gradientCheckBox.setFocusable(false);
        gradientCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gradientCheckBox.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        gradientCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradientCheckBoxActionPerformed(evt);
            }
        });
        topToolBar.add(gradientCheckBox);

        colorsGradientComboBox.setToolTipText("Segundo color para degradado");
        colorsGradientComboBox.setMaximumSize(new java.awt.Dimension(34, 25));
        colorsGradientComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorsGradientComboBoxActionPerformed(evt);
            }
        });
        topToolBar.add(colorsGradientComboBox);
        topToolBar.add(jSeparator7);

        transparencyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/transparencia.png"))); // NOI18N
        transparencyButton.setToolTipText("Transparencia");
        transparencyButton.setFocusable(false);
        transparencyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transparencyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        transparencyButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                transparencyButtonItemStateChanged(evt);
            }
        });
        topToolBar.add(transparencyButton);

        transparencySlider.setToolTipText("Grado Transparencia");
        transparencySlider.setMaximumSize(new java.awt.Dimension(50, 16));
        transparencySlider.setMinimumSize(new java.awt.Dimension(50, 16));
        transparencySlider.setPreferredSize(new java.awt.Dimension(50, 16));
        transparencySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transparencySliderStateChanged(evt);
            }
        });
        topToolBar.add(transparencySlider);
        topToolBar.add(jSeparator8);

        antialiasingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/alisar.png"))); // NOI18N
        antialiasingButton.setToolTipText("Alisar");
        antialiasingButton.setFocusable(false);
        antialiasingButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        antialiasingButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        antialiasingButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                antialiasingButtonItemStateChanged(evt);
            }
        });
        topToolBar.add(antialiasingButton);
        topToolBar.add(jSeparator5);

        playAudioButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/play24x24.png"))); // NOI18N
        playAudioButton.setToolTipText("Play audio");
        playAudioButton.setFocusable(false);
        playAudioButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playAudioButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playAudioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playAudioButtonActionPerformed(evt);
            }
        });
        topToolBar.add(playAudioButton);

        stopAudioButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/stop24x24.png"))); // NOI18N
        stopAudioButton.setToolTipText("Stop audio");
        stopAudioButton.setFocusable(false);
        stopAudioButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopAudioButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopAudioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopAudioButtonActionPerformed(evt);
            }
        });
        topToolBar.add(stopAudioButton);

        playList.setToolTipText("Play List audio");
        playList.setMaximumSize(new java.awt.Dimension(100, 25));
        playList.setPreferredSize(new java.awt.Dimension(100, 25));
        topToolBar.add(playList);
        topToolBar.add(jSeparator6);

        recordAudioButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/record24x24.png"))); // NOI18N
        recordAudioButton.setToolTipText("Grabar audio");
        recordAudioButton.setFocusable(false);
        recordAudioButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        recordAudioButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        recordAudioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordAudioButtonActionPerformed(evt);
            }
        });
        topToolBar.add(recordAudioButton);
        topToolBar.add(jSeparator9);

        webcamButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/Camara.png"))); // NOI18N
        webcamButton.setToolTipText("Visor webcam");
        webcamButton.setFocusable(false);
        webcamButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        webcamButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        webcamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webcamButtonActionPerformed(evt);
            }
        });
        topToolBar.add(webcamButton);

        snapshotButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/Capturar.png"))); // NOI18N
        snapshotButton.setToolTipText("Capturar instantánea");
        snapshotButton.setFocusable(false);
        snapshotButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        snapshotButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        snapshotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapshotButtonActionPerformed(evt);
            }
        });
        topToolBar.add(snapshotButton);

        getContentPane().add(topToolBar, java.awt.BorderLayout.NORTH);

        contenedorInferior.setLayout(new java.awt.BorderLayout());

        barraEstadoPanel.setLayout(new java.awt.BorderLayout());

        formaEnUso.setText("Barra de estado");
        barraEstadoPanel.add(formaEnUso, java.awt.BorderLayout.WEST);
        barraEstadoPanel.add(labelCoordenadas, java.awt.BorderLayout.EAST);

        contenedorInferior.add(barraEstadoPanel, java.awt.BorderLayout.SOUTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel17.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Brillo");
        jPanel17.add(jLabel1, java.awt.BorderLayout.NORTH);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        sliderBrillo.setMaximum(250);
        sliderBrillo.setMinimum(-250);
        sliderBrillo.setValue(0);
        sliderBrillo.setPreferredSize(new java.awt.Dimension(150, 16));
        sliderBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderBrilloStateChanged(evt);
            }
        });
        sliderBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sliderBrillo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sliderBrillo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel17.add(jPanel5, java.awt.BorderLayout.PAGE_END);

        jPanel2.add(jPanel17, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setText("Filtro");
        jPanel1.add(jLabel2, java.awt.BorderLayout.NORTH);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        comboBoxFiltros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciano" }));
        comboBoxFiltros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxFiltrosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboBoxFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(comboBoxFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        jPanel2.add(jPanel1, java.awt.BorderLayout.CENTER);

        barraAtributos.add(jPanel2);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel15.setLayout(new java.awt.BorderLayout());

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel8.setText("Intensificación tonos");
        jPanel15.add(jLabel8, java.awt.BorderLayout.NORTH);

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel16.setLayout(new java.awt.BorderLayout());

        sliderIntensificacion.setMaximum(215);
        sliderIntensificacion.setMinimum(40);
        sliderIntensificacion.setToolTipText("Tonos a intensificar");
        sliderIntensificacion.setPreferredSize(new java.awt.Dimension(150, 16));
        sliderIntensificacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderIntensificacionStateChanged(evt);
            }
        });
        sliderIntensificacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderIntensificacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderIntensificacionFocusLost(evt);
            }
        });
        jPanel16.add(sliderIntensificacion, java.awt.BorderLayout.CENTER);

        jPanel15.add(jPanel16, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel15, java.awt.BorderLayout.SOUTH);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Contraste");
        jPanel3.add(jLabel3, java.awt.BorderLayout.NORTH);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        botonContraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/contraste.png"))); // NOI18N
        botonContraste.setToolTipText("Contraste normal");
        botonContraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrasteActionPerformed(evt);
            }
        });
        jPanel6.add(botonContraste);

        botonIluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/iluminar.png"))); // NOI18N
        botonIluminar.setToolTipText("Contraste iluminado");
        botonIluminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIluminarActionPerformed(evt);
            }
        });
        jPanel6.add(botonIluminar);

        botonOscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/oscurecer.png"))); // NOI18N
        botonOscurecer.setToolTipText("Contraste oscurecido");
        botonOscurecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOscurecerActionPerformed(evt);
            }
        });
        jPanel6.add(botonOscurecer);

        jPanel3.add(jPanel6, java.awt.BorderLayout.CENTER);

        barraAtributos.add(jPanel3);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setText("Efectos imagen");
        jPanel7.add(jLabel4, java.awt.BorderLayout.NORTH);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel8.setLayout(new java.awt.GridLayout(2, 2));

        botonSeno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/sinusoidal.png"))); // NOI18N
        botonSeno.setToolTipText("Funcion seno");
        botonSeno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSenoActionPerformed(evt);
            }
        });
        jPanel8.add(botonSeno);

        botonSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/sepia.png"))); // NOI18N
        botonSepia.setToolTipText("Efecto sepia");
        botonSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSepiaActionPerformed(evt);
            }
        });
        jPanel8.add(botonSepia);

        botonNegativo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/negativo.png"))); // NOI18N
        botonNegativo.setToolTipText("Efecto negativo");
        botonNegativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNegativoActionPerformed(evt);
            }
        });
        jPanel8.add(botonNegativo);

        botonViñeta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/viñeta.png"))); // NOI18N
        botonViñeta.setToolTipText("Efecto Viñeta");
        botonViñeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonViñetaActionPerformed(evt);
            }
        });
        jPanel8.add(botonViñeta);

        botonRandom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/color.png"))); // NOI18N
        botonRandom.setToolTipText("Efecto aumento color");
        botonRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRandomActionPerformed(evt);
            }
        });
        jPanel8.add(botonRandom);

        jPanel7.add(jPanel8, java.awt.BorderLayout.CENTER);

        barraAtributos.add(jPanel7);

        jPanel20.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.BorderLayout());

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setText("Color");
        jPanel13.add(jLabel7, java.awt.BorderLayout.NORTH);

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        botonBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/bandas.png"))); // NOI18N
        botonBandas.setToolTipText("Extraer bandas");
        botonBandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBandasActionPerformed(evt);
            }
        });
        jPanel14.add(botonBandas);

        comboBoxEspacioColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RGB", "YCC", "GREY" }));
        comboBoxEspacioColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxEspacioColorActionPerformed(evt);
            }
        });
        jPanel14.add(comboBoxEspacioColor);

        jPanel13.add(jPanel14, java.awt.BorderLayout.CENTER);

        jPanel20.add(jPanel13, java.awt.BorderLayout.NORTH);

        jPanel11.setLayout(new java.awt.BorderLayout());

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel6.setText("Escala");
        jPanel11.add(jLabel6, java.awt.BorderLayout.NORTH);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        botonAumentarEscala.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/aumentar.png"))); // NOI18N
        botonAumentarEscala.setToolTipText("Aumentar");
        botonAumentarEscala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAumentarEscalaActionPerformed(evt);
            }
        });
        jPanel12.add(botonAumentarEscala);

        botonDisminuirEscala.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/disminuir.png"))); // NOI18N
        botonDisminuirEscala.setToolTipText("Disminuir");
        botonDisminuirEscala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDisminuirEscalaActionPerformed(evt);
            }
        });
        jPanel12.add(botonDisminuirEscala);

        jPanel11.add(jPanel12, java.awt.BorderLayout.CENTER);

        jPanel20.add(jPanel11, java.awt.BorderLayout.CENTER);

        barraAtributos.add(jPanel20);

        jPanel9.setLayout(new java.awt.BorderLayout());

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setText("Rotacion");
        jPanel9.add(jLabel5, java.awt.BorderLayout.NORTH);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        sliderRotacion.setMaximum(360);
        sliderRotacion.setValue(0);
        sliderRotacion.setPreferredSize(new java.awt.Dimension(100, 16));
        sliderRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRotacionStateChanged(evt);
            }
        });
        sliderRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusLost(evt);
            }
        });
        jPanel10.add(sliderRotacion);

        botonRotacion90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/rotacion90.png"))); // NOI18N
        botonRotacion90.setToolTipText("Rotación 90º");
        botonRotacion90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRotacion90ActionPerformed(evt);
            }
        });
        jPanel10.add(botonRotacion90);

        botonRotacion180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/rotacion180.png"))); // NOI18N
        botonRotacion180.setToolTipText("Rotación 180º");
        botonRotacion180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRotacion180ActionPerformed(evt);
            }
        });
        jPanel10.add(botonRotacion180);

        botonRotacion270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/rotacion270.png"))); // NOI18N
        botonRotacion270.setToolTipText("Rotación 270º");
        botonRotacion270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRotacion270ActionPerformed(evt);
            }
        });
        jPanel10.add(botonRotacion270);

        jPanel9.add(jPanel10, java.awt.BorderLayout.CENTER);

        jPanel18.setLayout(new java.awt.BorderLayout());

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel9.setText("Ordenación figuras");
        jPanel18.add(jLabel9, java.awt.BorderLayout.NORTH);

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        moveBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/arrowDown.png"))); // NOI18N
        moveBack.setToolTipText("Mover una posición atrás");
        moveBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBackActionPerformed(evt);
            }
        });
        jPanel19.add(moveBack);

        moveToLastPosition.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/doubleArrowDown.png"))); // NOI18N
        moveToLastPosition.setToolTipText("Mover al fondo");
        moveToLastPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveToLastPositionActionPerformed(evt);
            }
        });
        jPanel19.add(moveToLastPosition);

        moveFront.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/arrowUpp.png"))); // NOI18N
        moveFront.setToolTipText("Mover una posición delante");
        moveFront.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveFrontActionPerformed(evt);
            }
        });
        jPanel19.add(moveFront);

        moveToFirstPosition.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/doubleArrowUp.png"))); // NOI18N
        moveToFirstPosition.setToolTipText("Mover al frente");
        moveToFirstPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveToFirstPositionActionPerformed(evt);
            }
        });
        jPanel19.add(moveToFirstPosition);

        jPanel18.add(jPanel19, java.awt.BorderLayout.CENTER);

        jPanel9.add(jPanel18, java.awt.BorderLayout.PAGE_END);

        barraAtributos.add(jPanel9);

        contenedorInferior.add(barraAtributos, java.awt.BorderLayout.WEST);

        getContentPane().add(contenedorInferior, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout desktopLayout = new javax.swing.GroupLayout(desktop);
        desktop.setLayout(desktopLayout);
        desktopLayout.setHorizontalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1308, Short.MAX_VALUE)
        );
        desktopLayout.setVerticalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 172, Short.MAX_VALUE)
        );

        getContentPane().add(desktop, java.awt.BorderLayout.CENTER);

        menuArchivo.setText("Archivo");

        menuNuevo.setText("Nuevo");
        menuNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(menuNuevo);

        menuAbrir.setText("Abrir");
        menuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(menuAbrir);

        menuGuardar.setText("Guardar");
        menuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(menuGuardar);

        jMenuBar1.add(menuArchivo);

        menuEdicion.setText("Ver");

        menuBarraEstado.setSelected(true);
        menuBarraEstado.setText("Ver barra de estado");
        menuBarraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarraEstadoActionPerformed(evt);
            }
        });
        menuEdicion.add(menuBarraEstado);

        menuBarraFormas.setSelected(true);
        menuBarraFormas.setText("Ver barra de formas");
        menuBarraFormas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarraFormasActionPerformed(evt);
            }
        });
        menuEdicion.add(menuBarraFormas);

        menuBarraAtributos.setSelected(true);
        menuBarraAtributos.setText("Ver barra de atributos");
        menuBarraAtributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarraAtributosActionPerformed(evt);
            }
        });
        menuEdicion.add(menuBarraAtributos);

        jMenuBar1.add(menuEdicion);

        menuImagen.setText("Imagen");

        opcionDuplicarImagen.setText("Duplicar Imagen");
        opcionDuplicarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionDuplicarImagenActionPerformed(evt);
            }
        });
        menuImagen.add(opcionDuplicarImagen);

        jMenuBar1.add(menuImagen);

        jMenu1.setText("Ayuda");

        jMenuItem1.setText("Acerca de");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNuevoActionPerformed
        ImageSizeDialog dlg = new ImageSizeDialog(this, true);
        createNewInternalWindowImage();
    }//GEN-LAST:event_menuNuevoActionPerformed

    private void menuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirActionPerformed
        openFile();
    }//GEN-LAST:event_menuAbrirActionPerformed

    private void lineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineButtonActionPerformed
        formaEnUso.setText("Línea");
        activeWindow.getLienzo().setFigureToPaint(Figure.LINE);
    }//GEN-LAST:event_lineButtonActionPerformed

    private void rectangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleButtonActionPerformed
        formaEnUso.setText("Rectángulo");
        activeWindow.getLienzo().setFigureToPaint(Figure.RECTANGLE);
    }//GEN-LAST:event_rectangleButtonActionPerformed

    private void ellipseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ellipseButtonActionPerformed
        formaEnUso.setText("Óvalo");
        activeWindow.getLienzo().setFigureToPaint(Figure.OVAL);
    }//GEN-LAST:event_ellipseButtonActionPerformed

    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed
        saveFile();
    }//GEN-LAST:event_menuGuardarActionPerformed

    private void menuBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarraEstadoActionPerformed
        formaEnUso.setVisible(menuBarraEstado.isSelected());
    }//GEN-LAST:event_menuBarraEstadoActionPerformed

    private void strokeSizeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_strokeSizeSpinnerStateChanged
        float grosor = (int)strokeSizeSpinner.getValue() * 1.0f;
        activeWindow.getLienzo().setStroke(grosor);
    }//GEN-LAST:event_strokeSizeSpinnerStateChanged

    private void menuBarraFormasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarraFormasActionPerformed
        topToolBar.setVisible(menuBarraFormas.isSelected());
    }//GEN-LAST:event_menuBarraFormasActionPerformed

    private void menuBarraAtributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarraAtributosActionPerformed
        barraAtributos.setVisible(menuBarraAtributos.isSelected());
    }//GEN-LAST:event_menuBarraAtributosActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        saveFile();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void colorsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorsComboBoxActionPerformed
        int indiceColorSeleccionado = colorsComboBox.getSelectedIndex();
        activeWindow.getLienzo().setColor(colors[indiceColorSeleccionado]);
    }//GEN-LAST:event_colorsComboBoxActionPerformed

    private void fillingButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fillingButtonItemStateChanged
        int state = evt.getStateChange();
        activeWindow.getLienzo().setFilling(state == ItemEvent.SELECTED);
    }//GEN-LAST:event_fillingButtonItemStateChanged

    private void transparencyButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_transparencyButtonItemStateChanged
        int state = evt.getStateChange();
        activeWindow.getLienzo().setTransparency(state == ItemEvent.SELECTED);
    }//GEN-LAST:event_transparencyButtonItemStateChanged

    private void antialiasingButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_antialiasingButtonItemStateChanged
        int state = evt.getStateChange();
        activeWindow.getLienzo().setAntialiasing(state == ItemEvent.SELECTED);
    }//GEN-LAST:event_antialiasingButtonItemStateChanged

    private void editButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_editButtonItemStateChanged
        int state = evt.getStateChange();
        activeWindow.getLienzo().setEditAction(state == ItemEvent.SELECTED);
    }//GEN-LAST:event_editButtonItemStateChanged

    private void comboBoxFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxFiltrosActionPerformed
        String filtroSeleccionado = (String)comboBoxFiltros.getSelectedItem();
        if (null != filtroSeleccionado)
            switch (filtroSeleccionado) {
            case "Media":
                activeWindow.getLienzo().applyFilter(KernelProducer.TYPE_MEDIA_3x3);
                break;
            case "Binomial":
                activeWindow.getLienzo().applyFilter(KernelProducer.TYPE_BINOMIAL_3x3);
                break;
            case "Enfoque":
                activeWindow.getLienzo().applyFilter(KernelProducer.TYPE_ENFOQUE_3x3);       
                break;
            case "Relieve":
                activeWindow.getLienzo().applyFilter(KernelProducer.TYPE_RELIEVE_3x3);
                break;
            case "Laplaciano":
                activeWindow.getLienzo().applyFilter(KernelProducer.TYPE_LAPLACIANA_3x3);
                break;
            default:
                break;
        }       
    }//GEN-LAST:event_comboBoxFiltrosActionPerformed

    private void sliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusGained
        if(activeWindow!=null){
            BufferedImage imgOriginal = activeWindow.getLienzo().getImage();
            imgSource = Lienzo2DImagen.deepCopy(imgOriginal);
        }   
    }//GEN-LAST:event_sliderBrilloFocusGained

    private void sliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusLost
        imgSource = null;
        sliderBrillo.setValue(0);
    }//GEN-LAST:event_sliderBrilloFocusLost

    private void sliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBrilloStateChanged
        if(imgSource!=null){
            float valorBrillo = (float)sliderBrillo.getValue();
            RescaleOp rop = new RescaleOp(1.0f,valorBrillo, null);
            rop.filter(imgSource, activeWindow.getLienzo().getImage());
            activeWindow.getLienzo().repaint();
            desktop.repaint();
        }
    }//GEN-LAST:event_sliderBrilloStateChanged

    private void newFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileButtonActionPerformed
        ImageSizeDialog dlg = new ImageSizeDialog(this, true);
        createNewInternalWindowImage();
    }//GEN-LAST:event_newFileButtonActionPerformed

    private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed
        openFile();
    }//GEN-LAST:event_openFileButtonActionPerformed

    private void botonContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteActionPerformed
        activeWindow.getLienzo().applyContrast(LookupTableProducer.TYPE_SFUNCION);
    }//GEN-LAST:event_botonContrasteActionPerformed

    private void botonIluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIluminarActionPerformed
        activeWindow.getLienzo().applyContrast(LookupTableProducer.TYPE_LOGARITHM);
    }//GEN-LAST:event_botonIluminarActionPerformed

    private void botonOscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOscurecerActionPerformed
        activeWindow.getLienzo().applyContrast(LookupTableProducer.TYPE_POWER);
    }//GEN-LAST:event_botonOscurecerActionPerformed

    private void botonSenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSenoActionPerformed
        activeWindow.getLienzo().applySinus(180.0/255.0);
    }//GEN-LAST:event_botonSenoActionPerformed

    private void botonRotacion90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRotacion90ActionPerformed
        activeWindow.getLienzo().rotateImage(90);
    }//GEN-LAST:event_botonRotacion90ActionPerformed

    private void botonRotacion180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRotacion180ActionPerformed
        activeWindow.getLienzo().rotateImage(180);
    }//GEN-LAST:event_botonRotacion180ActionPerformed

    private void botonRotacion270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRotacion270ActionPerformed
        activeWindow.getLienzo().rotateImage(270);
    }//GEN-LAST:event_botonRotacion270ActionPerformed

    private void sliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRotacionStateChanged
        if(imgSource!=null){
            BufferedImage imgDest = activeWindow.getLienzo().getImage();
            double r = Math.toRadians(sliderRotacion.getValue());
            Point p = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
            AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
            AffineTransformOp atop;
            atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
            imgDest = atop.filter(imgSource, null);
            activeWindow.getLienzo().setImage(imgDest);
            activeWindow.getLienzo().repaint();
        }
    }//GEN-LAST:event_sliderRotacionStateChanged

    private void sliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusGained
        if(activeWindow!=null){
            BufferedImage imgOriginal = activeWindow.getLienzo().getImage();
            imgSource = Lienzo2DImagen.deepCopy(imgOriginal);
        }   
    }//GEN-LAST:event_sliderRotacionFocusGained

    private void sliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusLost
        imgSource = null;
        sliderRotacion.setValue(0);
    }//GEN-LAST:event_sliderRotacionFocusLost

    private void botonAumentarEscalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAumentarEscalaActionPerformed
        activeWindow.getLienzo().scaleImage(1.25);
    }//GEN-LAST:event_botonAumentarEscalaActionPerformed

    private void botonDisminuirEscalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDisminuirEscalaActionPerformed
        activeWindow.getLienzo().scaleImage(0.75);
    }//GEN-LAST:event_botonDisminuirEscalaActionPerformed

    private void botonBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBandasActionPerformed
        Lienzo2DImagen lienzoOriginal = activeWindow.getLienzo();
        int numeroBandas = lienzoOriginal.getImage().getRaster().getNumBands();
        for (int numBanda = 0; numBanda<numeroBandas; numBanda++){
            BufferedImage imgBanda;
            imgBanda = lienzoOriginal.extractBand(numBanda);
            creatInternalWindowWithImage(imgBanda, Integer.toString(numBanda));
        }
    }//GEN-LAST:event_botonBandasActionPerformed

    private void comboBoxEspacioColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxEspacioColorActionPerformed
        String espacioColor = (String)comboBoxEspacioColor.getSelectedItem();
        Lienzo2DImagen lienzoOriginal = activeWindow.getLienzo();
        
        BufferedImage imgEspacioColor;
        imgEspacioColor = lienzoOriginal.newColorSpace(espacioColor);
        
        creatInternalWindowWithImage(imgEspacioColor, espacioColor);
    }//GEN-LAST:event_comboBoxEspacioColorActionPerformed

    private void botonSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSepiaActionPerformed
        Lienzo2DImagen lienzoOriginal = activeWindow.getLienzo();
        
        BufferedImage imgSepia;
        imgSepia = lienzoOriginal.applyOp("SEPIA");
        
        creatInternalWindowWithImage(imgSepia,"SEPIA");       
    }//GEN-LAST:event_botonSepiaActionPerformed

    private void botonNegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNegativoActionPerformed
        Lienzo2DImagen lienzo = activeWindow.getLienzo();
        lienzo.aplicarNegativo();
    }//GEN-LAST:event_botonNegativoActionPerformed

    private void botonViñetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonViñetaActionPerformed
        Lienzo2DImagen lienzoOriginal = activeWindow.getLienzo();
        
        BufferedImage imgViñeta;
        imgViñeta = lienzoOriginal.applyOp("VIÑETA");
        
        creatInternalWindowWithImage(imgViñeta,"VIÑETA");  
    }//GEN-LAST:event_botonViñetaActionPerformed

    private void opcionDuplicarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionDuplicarImagenActionPerformed
        Lienzo2DImagen lienzo = activeWindow.getLienzo();
        BufferedImage img = lienzo.deepCopy(lienzo.deepCopy(lienzo.getImage()));
        creatInternalWindowWithImage(img, "Copia");
    }//GEN-LAST:event_opcionDuplicarImagenActionPerformed

    private void botonRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRandomActionPerformed
        Lienzo2DImagen lienzoOriginal = activeWindow.getLienzo();
        
        BufferedImage imgViñeta;
        imgViñeta = lienzoOriginal.applyOp("AUMENTA_COLOR");
        
        creatInternalWindowWithImage(imgViñeta,"COLOR AUMENTADO"); 
    }//GEN-LAST:event_botonRandomActionPerformed

    private void sliderIntensificacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderIntensificacionFocusGained
        if(activeWindow!=null){
            BufferedImage imgOriginal = activeWindow.getLienzo().getImage();
            imgSource = Lienzo2DImagen.deepCopy(imgOriginal);
        } 
    }//GEN-LAST:event_sliderIntensificacionFocusGained

    private void sliderIntensificacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderIntensificacionFocusLost
        imgSource = null;
        sliderIntensificacion.setValue(40);
    }//GEN-LAST:event_sliderIntensificacionFocusLost

    private void sliderIntensificacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderIntensificacionStateChanged
        if(imgSource!=null){
            int valorTono = sliderIntensificacion.getValue();
            activeWindow.getLienzo().applyIntensification(valorTono, imgSource);
            desktop.repaint();
        }
    }//GEN-LAST:event_sliderIntensificacionStateChanged

    private void stopAudioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopAudioButtonActionPerformed
        if(player != null){
            player.stop();
            player = null;
            playAudioButton.setEnabled(true);
            isAudioPlaying = false;
        }
    }//GEN-LAST:event_stopAudioButtonActionPerformed

    private void recordAudioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordAudioButtonActionPerformed

        Icon startRecordingIcon = new ImageIcon(
                MainWindow.class.getResource("iconos/record24x24.png"));
        Icon stopRecordingIcon = new ImageIcon(
                MainWindow.class.getResource("iconos/stopRecord24x24.png"));
        
        File tmpFile = null;
        tmpFile = new File("recordedAudio.wav");
        
        if(recordAudioButton.isSelected()){
            recordAudioButton.setIcon(stopRecordingIcon);
            recorder = new SMSoundRecorder(tmpFile);
            recorder.record();
        }
        else{
            recorder.stop();
            recordAudioButton.setIcon(startRecordingIcon);
            System.out.print(tmpFile.getName());
            saveAudio(tmpFile);
        }
    }//GEN-LAST:event_recordAudioButtonActionPerformed

    private void playAudioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playAudioButtonActionPerformed
        if(playAudioButton.isSelected()){
            if (isAudioPlaying){
                player.resume();
                playAudioButton.setIcon(pauseAudioIcon);  
            }
            else{
                File audioFile = (File)playList.getSelectedItem();
                if(audioFile!=null){
                    player = new SMClipPlayer(audioFile);
                    player.addLineListener(new AudioController());
                    if (player != null) {
                        player.play();
                        isAudioPlaying = true;
                        playAudioButton.setIcon(pauseAudioIcon);
                    }
                }
            }
        }
        else{
            File audioFile = (File)playList.getSelectedItem();
            if(audioFile!=null){
            audioPausedByButton = true;
            player.pause();
            playAudioButton.setIcon(playAudioIcon);
            }
        }
    }//GEN-LAST:event_playAudioButtonActionPerformed

    private void moveBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBackActionPerformed
        activeWindow.getLienzo().moveShapePosition(-1);
    }//GEN-LAST:event_moveBackActionPerformed

    private void moveFrontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveFrontActionPerformed
        activeWindow.getLienzo().moveShapePosition(1);
    }//GEN-LAST:event_moveFrontActionPerformed

    private void moveToLastPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveToLastPositionActionPerformed
        activeWindow.getLienzo().moveShapeToLastPosition();
    }//GEN-LAST:event_moveToLastPositionActionPerformed

    private void moveToFirstPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveToFirstPositionActionPerformed
        activeWindow.getLienzo().moveShapeToFirstPosition();
    }//GEN-LAST:event_moveToFirstPositionActionPerformed

    private void curveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_curveButtonActionPerformed
        activeWindow.getLienzo().setFigureToPaint(Figure.CURVE);
    }//GEN-LAST:event_curveButtonActionPerformed

    private void polyLineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_polyLineButtonActionPerformed
        activeWindow.getLienzo().setFigureToPaint(Figure.POLYLINE);
    }//GEN-LAST:event_polyLineButtonActionPerformed

    private void ringButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ringButtonActionPerformed
        activeWindow.getLienzo().setFigureToPaint(Figure.RING);
    }//GEN-LAST:event_ringButtonActionPerformed

    private void transparencySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transparencySliderStateChanged
        activeWindow.getLienzo().setTransparencyGrade(transparencySlider.getValue());
    }//GEN-LAST:event_transparencySliderStateChanged

    private void strokeTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strokeTypeComboBoxActionPerformed
        activeWindow.getLienzo().setStrokeType(strokeTypeComboBox.getItemAt(strokeTypeComboBox.getSelectedIndex()));
    }//GEN-LAST:event_strokeTypeComboBoxActionPerformed

    private void webcamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webcamButtonActionPerformed
        InternalWindow window;
        window = new InternalWindowCamera(this, getNewWindowLocation());
        desktop.add(window);
        window.setVisible(true);
        window.setTitle("Webcam");
        window.addInternalFrameListener(internalListener);
        setActiveWindow();
    }//GEN-LAST:event_webcamButtonActionPerformed

    private void snapshotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapshotButtonActionPerformed
        if(activeWindow.containsCamera()){
            BufferedImage img = ((InternalWindowCamera)activeWindow).getCamera().getImage();
            creatInternalWindowWithImage(img, "Captura");   
        }
        else if(activeWindow.containsVideo()){
            BufferedImage img = ((InternalWindowVLCPlayer)activeWindow).getVLCPlayer().getSnapshot();
            creatInternalWindowWithImage(img, "Captura");               
        }
    }//GEN-LAST:event_snapshotButtonActionPerformed

    private void colorsGradientComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorsGradientComboBoxActionPerformed
        int indiceColorSeleccionado = colorsGradientComboBox.getSelectedIndex();
        activeWindow.getLienzo().setSecondColor(colors[indiceColorSeleccionado]);
    }//GEN-LAST:event_colorsGradientComboBoxActionPerformed

    private void gradientCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradientCheckBoxActionPerformed
        activeWindow.getLienzo().setGradientFilling(gradientCheckBox.isSelected());
    }//GEN-LAST:event_gradientCheckBoxActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(this,
        "Paint \nVersión: 1.0 \nAutor: Antonio Jesús Peláez Priego");
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    
    private void creatInternalWindowWithImage(BufferedImage img, String nombreVentana){
        InternalWindow window;
        window = new InternalWindowImage(this, getNewWindowLocation());
        window.setPreferredSize(new Dimension(img.getHeight(), img.getWidth()));
        desktop.add(window);
        window.setVisible(true);
        window.setTitle(activeWindow.getTitle() + " [ " + nombreVentana + " ]");
        window.addInternalFrameListener(internalListener);
        setActiveWindow();
        setImageWindowAttributes();
        window.getLienzo().setImage(img);
    }
    
    private void openFile(){
        JFileChooser dlg = new JFileChooser();
        dlg.setFileFilter(new FileNameExtensionFilter("Video (*.mp4, *.mpg, *.avi)", "mp4", "mpg", "avi"));
        dlg.setFileFilter(new FileNameExtensionFilter("Audio (*.wav, *.au, *.mp3)", "wav", "au", "mp3"));
        dlg.setFileFilter(new FileNameExtensionFilter("Imágenes (*.jpg, *.bmp, *.png, *.gif, *.jpeg, *.wbmp)", "jpg", "bmp", "png", "gif", "jpeg", "wbmp"));
        
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File file;
                file = new File(dlg.getSelectedFile().getAbsolutePath()){
                    @Override
                    public String toString(){
                        return this.getName();
                    }
                };                
                
                String fileName = file.getName();
                String extension = fileName.substring(fileName.lastIndexOf(".")+1);
                
                if (extension.equals("wav")||(extension.equals("au"))){
                    playList.addItem(file);
                }
                else if (extension.equals("mp3")||(extension.equals("mp4"))||
                        (extension.equals("avi"))||(extension.equals("mpg"))){
                    
                    InternalWindow vi = new InternalWindowVLCPlayer(this, getNewWindowLocation());
                    desktop.add(vi);
                    vi.setVisible(true);
                    vi.setTitle(file.getName());
                    vi.addInternalFrameListener(internalListener);
                    setActiveWindow();
                    ((InternalWindowVLCPlayer)vi).setVideoContent(file);
                    ((InternalWindowVLCPlayer)vi).play();
                }
                else{        
                    BufferedImage img = ImageIO.read(file);
                    InternalWindow vi = new InternalWindowImage(this, getNewWindowLocation());
                    vi.getLienzo().setImage(img);

                    desktop.add(vi);
                    vi.setVisible(true);
                    vi.setTitle(file.getName());
                    vi.addInternalFrameListener(internalListener);
                    activeWindow = vi;
                    setImageWindowAttributes();
                }
            } 
            catch(Exception ex){
                JOptionPane.showMessageDialog(this,
                    "Error al leer el fichero.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            } 
        }
    }
    
    private void saveFile(){
        if (activeWindow != null) {
            JFileChooser dlg = new JFileChooser();
            dlg.setSelectedFile(new File("image.jpg"));
            dlg.setFileFilter(new FileNameExtensionFilter("Imágenes (*.jpg, *.bmp, *.png, *.gif, *.jpeg, *.wbmp)", "jpg", "bmp", "png", "gif", "jpeg", "wbmp"));
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    BufferedImage img = activeWindow.getLienzo().getImage(true);
                    if (img != null) {                
                        File f = dlg.getSelectedFile();
                        String fileName = f.getName();
                        String extension = fileName.substring(fileName.lastIndexOf(".")+1);
                        if (extension.equals("jpg")||(extension.equals("bmp"))||
                                (extension.equals("png"))||(extension.equals("gif"))||
                                (extension.equals("jpeg"))||(extension.equals("wbmp"))){
                            ImageIO.write(img, extension, f);
                            activeWindow.setTitle(f.getName());
                        }
                        else{
                            JOptionPane.showMessageDialog(this,
                                "Extensión inválida.",
                                "Error",
                                JOptionPane.ERROR_MESSAGE); 
                        }
                    }
                }
                catch (Exception ex) {
                    JOptionPane.showMessageDialog(this,
                        "Error al guardar la imagen.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                } 
            }
        }
    }
    
    private void saveAudio(File audioFile){
        JFileChooser dlg = new JFileChooser();
        dlg.setSelectedFile(new File("recordedAudio.wav"));
        dlg.setFileFilter(new FileNameExtensionFilter("Audio (*.wav)", "wav"));
        
        int resp = dlg.showSaveDialog(this);

        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File newFile;
                newFile = new File(dlg.getSelectedFile().getAbsolutePath()){
                    @Override
                    public String toString(){
                        return this.getName();
                    }
                };  
 
                audioFile.renameTo(newFile);
                playList.addItem(newFile);
            }
            catch (Exception ex) {
                System.err.println("Error al guardar el audio");
            }
        }
    }
    
    private void setActiveWindow(){
        if (desktop.getSelectedFrame() != null){
            activeWindow = (InternalWindow)desktop.getSelectedFrame();
            if (activeWindow.containsImage()) setImageWindowAttributes();
            enableImageButtons(activeWindow.containsImage());
        }
    }
    
    private void setImageWindowAttributes(){
        strokeSizeSpinner.setValue(activeWindow.getLienzo().getStroke());
        
        antialiasingButton.setSelected(activeWindow.getLienzo().getAntialiasing());
        transparencyButton.setSelected(activeWindow.getLienzo().getTransparency());
        transparencySlider.setValue(activeWindow.getLienzo().getTransparencyGrade());
        fillingButton.setSelected(activeWindow.getLienzo().getFilling());
        editButton.setSelected(activeWindow.getLienzo().getEditAction());
        strokeTypeComboBox.setSelectedItem(activeWindow.getLienzo().getStrokeType());
        colorsComboBox.setSelectedIndex(getColorIndex(activeWindow.getLienzo().getColor()));
        colorsGradientComboBox.setSelectedIndex(getColorIndex(activeWindow.getLienzo().getSecondColor()));
        gradientCheckBox.setSelected(activeWindow.getLienzo().getGradientFilling());
        Figure formaVentana = activeWindow.getLienzo().getFigureToPaint();
        if (formaVentana == Figure.RECTANGLE){
            grupoBotonesFormas.setSelected(rectangleButton.getModel(), true);
        }
        else if (formaVentana == Figure.OVAL){
            grupoBotonesFormas.setSelected(ellipseButton.getModel(), true);
        }
        else if (formaVentana == Figure.LINE){
            grupoBotonesFormas.setSelected(lineButton.getModel(), true);
        }           
    }
    
    private void createNewInternalWindowImage(){
        InternalWindow window = new InternalWindowImage(this, getNewWindowLocation());
        desktop.add(window);
        window.setVisible(true);
        window.setTitle("Nueva");
        window.addInternalFrameListener(internalListener);
        setActiveWindow();
        BufferedImage img;
        img = new BufferedImage(imgDimension.width,imgDimension.height,
                BufferedImage.TYPE_INT_RGB);
        window.getLienzo().setImage(img);
        window.getLienzo().imageFillWhite();
    }
    
    public void setMouseCoords(int x, int y){
        String coordenadas = "(" + Integer.toString(x) + " , " 
                + Integer.toString(y) + ")";
        labelCoordenadas.setText(coordenadas);
    }
    
    public static ImageIcon createColorImage(Color c) {
        int ancho = 24;
        int alto = 24;
        BufferedImage img = new BufferedImage(ancho, alto, BufferedImage.TYPE_INT_ARGB);
        Graphics g = img.createGraphics();
        g.setColor(c);
        g.fillRect(0, 0, ancho, alto);
        return new ImageIcon(img);
    }
    
    private int getColorIndex(Color color){
        int colorIndex = 0;
        for (int i=0; i<colors.length; i++){
            if(color==colors[i]) colorIndex = i;
        }
        return colorIndex;
    }
    
    private Point getNewWindowLocation(){
        Point localizacion;
        if (activeWindow != null){
            localizacion = activeWindow.getLocation();
            localizacion.x+=15;
            localizacion.y+=15;
        }
        else{
            localizacion = new Point(0,0);
        }
        return localizacion;
    }
    
    private void enableImageButtons(boolean state){
        lineButton.setEnabled(state);
        curveButton.setEnabled(state);
        colorsComboBox.setEnabled(state);
        saveButton.setEnabled(state);
        polyLineButton.setEnabled(state);
        rectangleButton.setEnabled(state);
        ellipseButton.setEnabled(state);
        ringButton.setEnabled(state);
        editButton.setEnabled(state);
        strokeSizeSpinner.setEnabled(state);
        strokeTypeComboBox.setEnabled(state);
        fillingButton.setEnabled(state);
        transparencyButton.setEnabled(state);
        transparencySlider.setEnabled(state);
        antialiasingButton.setEnabled(state);
        sliderBrillo.setEnabled(state);
        comboBoxFiltros.setEnabled(state);
        botonContraste.setEnabled(state);
        botonIluminar.setEnabled(state);
        botonOscurecer.setEnabled(state);
        sliderIntensificacion.setEnabled(state);
        botonSeno.setEnabled(state);
        botonSepia.setEnabled(state);
        botonNegativo.setEnabled(state);
        botonViñeta.setEnabled(state);
        botonRandom.setEnabled(state);
        botonBandas.setEnabled(state);
        comboBoxEspacioColor.setEnabled(state);
        botonAumentarEscala.setEnabled(state);
        botonDisminuirEscala.setEnabled(state);
        sliderRotacion.setEnabled(state);
        botonRotacion90.setEnabled(state);
        botonRotacion180.setEnabled(state);
        botonRotacion270.setEnabled(state);
        moveBack.setEnabled(state);
        moveToLastPosition.setEnabled(state);
        moveFront.setEnabled(state);
        moveToFirstPosition.setEnabled(state);
        opcionDuplicarImagen.setEnabled(state);
    }
    
    public void setImgDimension(Dimension d){
        imgDimension = d;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton antialiasingButton;
    private javax.swing.JPanel barraAtributos;
    private javax.swing.JPanel barraEstadoPanel;
    private javax.swing.JButton botonAumentarEscala;
    private javax.swing.JButton botonBandas;
    private javax.swing.JButton botonContraste;
    private javax.swing.JButton botonDisminuirEscala;
    private javax.swing.JButton botonIluminar;
    private javax.swing.JButton botonNegativo;
    private javax.swing.JButton botonOscurecer;
    private javax.swing.JButton botonRandom;
    private javax.swing.JButton botonRotacion180;
    private javax.swing.JButton botonRotacion270;
    private javax.swing.JButton botonRotacion90;
    private javax.swing.JButton botonSeno;
    private javax.swing.JButton botonSepia;
    private javax.swing.JButton botonViñeta;
    private javax.swing.JComboBox colorsComboBox;
    private javax.swing.JComboBox colorsGradientComboBox;
    private javax.swing.JComboBox<String> comboBoxEspacioColor;
    private javax.swing.JComboBox<String> comboBoxFiltros;
    private javax.swing.JPanel contenedorInferior;
    private javax.swing.JToggleButton curveButton;
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JToggleButton editButton;
    private javax.swing.JToggleButton ellipseButton;
    private javax.swing.JToggleButton fillingButton;
    private javax.swing.JLabel formaEnUso;
    private javax.swing.JCheckBox gradientCheckBox;
    private javax.swing.ButtonGroup grupoBotonesFormas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JLabel labelCoordenadas;
    private javax.swing.JToggleButton lineButton;
    private javax.swing.JMenuItem menuAbrir;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JCheckBoxMenuItem menuBarraAtributos;
    private javax.swing.JCheckBoxMenuItem menuBarraEstado;
    private javax.swing.JCheckBoxMenuItem menuBarraFormas;
    private javax.swing.JMenu menuEdicion;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JMenu menuImagen;
    private javax.swing.JMenuItem menuNuevo;
    private javax.swing.JButton moveBack;
    private javax.swing.JButton moveFront;
    private javax.swing.JButton moveToFirstPosition;
    private javax.swing.JButton moveToLastPosition;
    private javax.swing.JButton newFileButton;
    private javax.swing.JMenuItem opcionDuplicarImagen;
    private javax.swing.JButton openFileButton;
    private javax.swing.JToggleButton playAudioButton;
    private javax.swing.JComboBox<File> playList;
    private javax.swing.JToggleButton polyLineButton;
    private javax.swing.JToggleButton recordAudioButton;
    private javax.swing.JToggleButton rectangleButton;
    private javax.swing.JToggleButton ringButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JSlider sliderBrillo;
    private javax.swing.JSlider sliderIntensificacion;
    private javax.swing.JSlider sliderRotacion;
    private javax.swing.JButton snapshotButton;
    private javax.swing.JButton stopAudioButton;
    private javax.swing.JSpinner strokeSizeSpinner;
    private javax.swing.JComboBox<String> strokeTypeComboBox;
    private javax.swing.JToolBar topToolBar;
    private javax.swing.JToggleButton transparencyButton;
    private javax.swing.JSlider transparencySlider;
    private javax.swing.JButton webcamButton;
    // End of variables declaration//GEN-END:variables
}
